[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-05-28 12:45:46.752250",
  "module": "ESG Compliance",
  "name": "Calculate ESG",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        // Show Carbon Footprint Report button only if submitted and emissions are calculated\n        if (frm.doc.docstatus === 1 && frm.doc.custom_total_carbon_emissions_kg_co2e > 0) {\n            frm.add_custom_button(__('Carbon Footprint Report'), function () {\n                generate_carbon_report(frm);\n            }, __('Create'));\n        }\n    },\n\n    customer: function(frm) {\n        check_customer_carbon_preferences(frm);\n    },\n\n    custom_carbon_offset_required: function(frm) {\n        if (frm.doc.custom_carbon_offset_required && frm.doc.custom_total_carbon_emissions_kg_co2e) {\n            calculate_carbon_offset_cost(frm);\n        }\n    },\n\n    validate: function(frm) {\n        calculate_total_carbon_emissions(frm);\n    },\n\n    items_remove: function(frm) {\n        calculate_total_carbon_emissions(frm);\n    }\n});\n\nfrappe.ui.form.on('Sales Invoice Item', {\n    item_code: function(frm) {\n        calculate_total_carbon_emissions(frm);\n    },\n    qty: function(frm) {\n        calculate_total_carbon_emissions(frm);\n    },\n    rate: function(frm) {\n        calculate_total_carbon_emissions(frm);\n    }\n});\n\n// Calculate total emissions across all items with fresh data per item\nfunction calculate_total_carbon_emissions(frm) {\n    let promises = [];\n\n    (frm.doc.items || []).forEach(item => {\n        if (!item.item_code || !item.qty) return;\n\n        const promise = frappe.db.get_value('Item', item.item_code, [\n            'custom_carbon_emission_factor_kg_co2e_per_unit',\n            'custom_calculation_method',\n            'weight_per_unit'\n        ]).then(r => {\n            const data = r.message;\n            if (!data || !data.custom_carbon_emission_factor_kg_co2e_per_unit) return 0;\n\n            let emissions = item.qty * data.custom_carbon_emission_factor_kg_co2e_per_unit;\n\n            if (data.custom_calculation_method === 'Per Weight' && data.weight_per_unit) {\n                emissions = item.qty * data.weight_per_unit * data.custom_carbon_emission_factor_kg_co2e_per_unit;\n            }\n\n            frappe.model.set_value(item.doctype, item.name, 'custom_carbon_emissions_kg_co2e', emissions);\n            return emissions;\n        });\n\n        promises.push(promise);\n    });\n\n    Promise.all(promises).then(results => {\n        const total = results.reduce((sum, val) => sum + flt(val), 0);\n        frm.set_value('custom_total_carbon_emissions_kg_co2e', total);\n\n        if (frm.doc.custom_carbon_offset_required) {\n            calculate_carbon_offset_cost(frm);\n        }\n    });\n}\n\n// Pull customer preferences for reporting and offset\nfunction check_customer_carbon_preferences(frm) {\n    if (!frm.doc.customer) return;\n\n    frappe.db.get_value('Customer', frm.doc.customer, [\n        'custom_requires_carbon_footprint_reporting',\n        'custom_carbon_offset_preference'\n    ]).then(r => {\n        const prefs = r.message;\n        if (!prefs) return;\n\n        if (prefs.custom_carbon_offset_preference === 'Mandatory') {\n            frm.set_value('custom_carbon_offset_required', 1);\n        }\n\n        if (prefs.custom_requires_carbon_footprint_reporting) {\n            frappe.msgprint({\n                title: 'Carbon Reporting Required',\n                message: 'This customer requires carbon footprint reporting.',\n                indicator: 'blue'\n            });\n        }\n    });\n}\n\n// Calculate cost to offset total emissions\nfunction calculate_carbon_offset_cost(frm) {\n    const offset_rate = 25; // $25 per tonne CO2e\n    const tonnes = flt(frm.doc.custom_total_carbon_emissions_kg_co2e) / 1000;\n    const offset_cost = tonnes * offset_rate;\n\n    frm.set_value('custom_carbon_offset_cost', offset_cost);\n}\n\n// Trigger backend method to generate certificate\nfunction generate_carbon_report(frm) {\n    frappe.call({\n        method: 'your_app.carbon_tracking.generate_carbon_certificate',\n        args: {\n            sales_invoice: frm.doc.name\n        },\n        callback: function(r) {\n            if (r.message) {\n                frappe.msgprint('Carbon footprint certificate generated successfully!');\n            }\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-05-28 13:16:33.284846",
  "module": "ESG Compliance",
  "name": "Carbon Calculation",
  "script": "frappe.ui.form.on('Purchase Invoice Item', {\n    qty: function(frm, cdt, cdn) {\n        calculate_item_emissions(frm, cdt, cdn);\n    },\n    received_qty: function(frm, cdt, cdn) {\n        calculate_item_emissions(frm, cdt, cdn);\n    },\n    item_code: function(frm, cdt, cdn) {\n        calculate_item_emissions(frm, cdt, cdn);\n    }\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    validate: function(frm) {\n        // On validate, recalc all items emissions then total\n        if (frm.doc.items && frm.doc.items.length) {\n            frm.doc.items.forEach(item => {\n                calculate_item_emissions(frm, 'Purchase Invoice Item', item.name);\n            });\n        }\n        calculate_total_emissions(frm);\n    }\n});\n\nfunction calculate_item_emissions(frm, cdt, cdn) {\n    const row = locals[cdt][cdn];\n    if (!row.item_code || (!(row.qty || row.received_qty))) {\n        frappe.model.set_value(cdt, cdn, 'custom_carbon_emissions_kg_co2e', 0);\n        calculate_total_emissions(frm);\n        return;\n    }\n    frappe.db.get_value('Item', row.item_code, ['custom_carbon_emission_factor_kg_co2e_per_unit', 'custom_calculation_method']).then(r => {\n        if (r.message && r.message.custom_carbon_emission_factor_kg_co2e_per_unit) {\n            let qty = row.received_qty || row.qty;\n            let factor = r.message.custom_carbon_emission_factor_kg_co2e_per_unit;\n            let method = r.message.custom_calculation_method;\n\n            let emissions = 0;\n            if (method === 'Per Weight' && row.weight_per_unit) {\n                emissions = qty * row.weight_per_unit * factor;\n            } else {\n                emissions = qty * factor;\n            }\n\n            frappe.model.set_value(cdt, cdn, 'custom_carbon_emissions_kg_co2e', emissions);\n        } else {\n            frappe.model.set_value(cdt, cdn, 'custom_carbon_emissions_kg_co2e', 0);\n        }\n        calculate_total_emissions(frm);\n    });\n}\n\nfunction calculate_total_emissions(frm) {\n    let total = 0;\n    if (frm.doc.items && frm.doc.items.length) {\n        frm.doc.items.forEach(item => {\n            total += item.custom_carbon_emissions_kg_co2e || 0;\n        });\n    }\n    frm.set_value('custom_total_carbon_emissions_kg_co2e', total);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-05-30 12:19:57.370107",
  "module": "ESG Compliance",
  "name": "Delivery Note Carbon Calculation",
  "script": "// Client Script: Delivery Note Carbon Calculation\nfrappe.ui.form.on('Delivery Note Item', {\n    qty: function(frm, cdt, cdn) {\n        calculate_delivery_item_carbon_emissions(frm, cdt, cdn);\n    },\n    item_code: function(frm, cdt, cdn) {\n        calculate_delivery_item_carbon_emissions(frm, cdt, cdn);\n    }\n});\n\nfrappe.ui.form.on('Delivery Note', {\n    refresh: function(frm) {\n        calculate_total_delivery_carbon_emissions(frm);\n    },\n    custom_transport_carbon_emissions_kg_co2e: function(frm) {\n        calculate_total_delivery_carbon_emissions(frm);\n    },\n    customer: function(frm) {\n        if (frm.doc.customer) {\n            frappe.db.get_value('Customer', frm.doc.customer, 'custom_carbon_offset_preference')\n                .then(r => {\n                    if (r.message && r.message.custom_carbon_offset_preference === 'Mandatory') {\n                        frappe.msgprint({\n                            title: 'Carbon Offset Required',\n                            message: 'This customer requires mandatory carbon offsetting for deliveries.',\n                            indicator: 'orange'\n                        });\n                    }\n                });\n        }\n    }\n});\n\n/**\n * Calculate carbon emissions for each delivery line\n */\nfunction calculate_delivery_item_carbon_emissions(frm, cdt, cdn) {\n    const row = locals[cdt][cdn];\n    const qty = row.qty || 0;\n    if (!row.item_code || qty <= 0) {\n        frappe.model.set_value(cdt, cdn, 'custom_carbon_emissions_kg_co2e', 0);\n        calculate_total_delivery_carbon_emissions(frm);\n        return;\n    }\n\n    frappe.db.get_value('Item', row.item_code,\n        ['custom_carbon_emission_factor_kg_co2e_per_unit', 'custom_calculation_method'])\n    .then(r => {\n        const factor = (r.message && r.message.custom_carbon_emission_factor_kg_co2e_per_unit) || 0;\n        let emissions = qty * factor;\n\n        // Weight-based method\n        if (r.message.custom_calculation_method === 'Per Weight' && row.weight_per_unit) {\n            emissions = qty * row.weight_per_unit * factor;\n        }\n\n        frappe.model.set_value(cdt, cdn, 'custom_carbon_emissions_kg_co2e', emissions);\n        calculate_total_delivery_carbon_emissions(frm);\n    })\n    .catch(() => frappe.msgprint(__('Failed to fetch emission factor for {0}', [row.item_code])));\n}\n\n/**\n * Sum line emissions plus transport to total\n */\nfunction calculate_total_delivery_carbon_emissions(frm) {\n    let productEm = 0;\n    (frm.doc.items || []).forEach(item => {\n        productEm += item.custom_carbon_emissions_kg_co2e || 0;\n    });\n    frm.set_value('custom_product_carbon_emissions_kg_co2e', productEm);\n\n    const transportEm = frm.doc.custom_transport_carbon_emissions_kg_co2e || 0;\n    const total = productEm + transportEm;\n    frm.set_value('custom_total_delivery_emissions_kg_co2e', total);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-05-28 15:11:39.550477",
  "module": "ESG Compliance",
  "name": "Stock Entry Carbon Calculation",
  "script": "//\n// Stock Entry Carbon Impact (Configurable Multipliers)\n//\nfrappe.ui.form.on('Stock Entry', {\n  refresh(frm) {\n    load_stock_entry_multipliers(frm)\n      .then(() => calculate_total_stock_carbon_impact(frm));\n  },\n  stock_entry_type(frm) {\n    // reload multipliers & recalc when type changes\n    load_stock_entry_multipliers(frm)\n      .then(() => calculate_total_stock_carbon_impact(frm));\n  },\n  validate(frm) {\n    // ensure all lines are up-to-date before saving\n    (frm.doc.items || []).forEach(row =>\n      calculate_stock_item_carbon_impact(frm, 'Stock Entry Detail', row.name)\n    );\n    calculate_total_stock_carbon_impact(frm);\n  }\n});\n\nfrappe.ui.form.on('Stock Entry Detail', {\n  item_code: calculate_stock_item_carbon_impact,\n  qty: calculate_stock_item_carbon_impact,\n  transfer_qty: calculate_stock_item_carbon_impact\n});\n\n// Load multipliers from the Company record into frm.stock_multipliers\nasync function load_stock_entry_multipliers(frm) {\n  if (!frm.doc.company) {\n    frm.stock_multipliers = {};\n    return;\n  }\n  const fields = [\n    'custom_material_issue_multiplier',\n    'custom_material_receipt_multiplier',\n    'custom_material_transfer_multiplier',\n    'custom_manufacture_multiplier',\n    'custom_repack_multiplier',\n    'custom_subcontractor_multiplier'\n  ];\n  const res = await frappe.db.get_value('Company', frm.doc.company, fields);\n  frm.stock_multipliers = res.message || {};\n}\n\n// Pick the right multiplier based on entry type\nfunction get_stock_entry_multiplier(frm) {\n  const m = frm.stock_multipliers || {};\n  switch(frm.doc.stock_entry_type) {\n    case 'Material Issue': return m.custom_multiplier_material_issue || 1.0;\n    case 'Material Receipt': return m.custom_multiplier_material_receipt || 1.0;\n    case 'Material Transfer': return m.custom_multiplier_material_transfer || 1.0;\n    case 'Manufacture': return m.custom_multiplier_manufacture || 1.0;\n    case 'Repack': return m.custom_multiplier_repack || 1.0;\n    case 'Send to Subcontractor': return m.custom_multiplier_send_to_subcontractor || 1.0;\n    default: return 1.0;\n  }\n}\n\n// Calculate one row’s carbon impact\nasync function calculate_stock_item_carbon_impact(frm, cdt, cdn) {\n  const row = locals[cdt][cdn];\n  let impact = 0;\n\n  if (row.item_code && (row.transfer_qty || row.qty)) {\n    // 1) Fetch custom factor from Item\n    const r = await frappe.db.get_value('Item', row.item_code,\n      'custom_carbon_emission_factor_kg_co2e_per_unit'\n    );\n    const factor = parseFloat(r?.message?.custom_carbon_emission_factor_kg_co2e_per_unit || 0);\n\n    // 2) Determine quantity\n    const qty = row.transfer_qty || row.qty;\n\n    // 3) Get the user-defined multiplier\n    const mult = get_stock_entry_multiplier(frm);\n\n    // 4) Compute & round\n    impact = qty * factor * mult;\n    impact = Math.round(impact * 100) / 100;\n  }\n\n  frappe.model.set_value(cdt, cdn, 'custom_carbon_impact_kg_co2e', impact);\n  calculate_total_stock_carbon_impact(frm);\n}\n\n// Sum all row impacts into the total field\nfunction calculate_total_stock_carbon_impact(frm) {\n  let total = 0;\n  (frm.doc.items || []).forEach(row => {\n    total += parseFloat(row.custom_carbon_impact_kg_co2e || 0);\n  });\n  total = Math.round(total * 100) / 100;\n  frm.set_value('custom_total_carbon_impact_kg_co2e', total);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Plan",
  "enabled": 1,
  "modified": "2025-05-28 13:38:40.827329",
  "module": "ESG Compliance",
  "name": "Production Plan Carbon Estimation",
  "script": "frappe.ui.form.on('Production Plan', {\n    refresh: function(frm) {\n        calculate_estimated_carbon_emissions(frm);\n    },\n    get_items_for_mr: function(frm) {\n        setTimeout(() => calculate_estimated_carbon_emissions(frm), 1000);\n    }\n});\n\nfrappe.ui.form.on('Production Plan Item', {\n    planned_qty: function(frm, cdt, cdn) {\n        calculate_estimated_carbon_emissions(frm);\n    },\n    item_code: function(frm, cdt, cdn) {\n        calculate_estimated_carbon_emissions(frm);\n    }\n});\n\nfunction calculate_estimated_carbon_emissions(frm) {\n    let promises = [];\n\n    if (frm.doc.po_items && frm.doc.po_items.length) {\n        frm.doc.po_items.forEach(item => {\n            if (item.item_code && item.planned_qty) {\n                // Fetch emission factor from Item.doctype using correct field name\n                let p = frappe.db.get_value('Item', item.item_code, 'custom_carbon_emission_factor_kg_co2e_per_unit')\n                    .then(r => {\n                        if (r.message && r.message.custom_carbon_emission_factor_kg_co2e_per_unit) {\n                            return item.planned_qty * parseFloat(r.message.custom_carbon_emission_factor_kg_co2e_per_unit);\n                        }\n                        return 0;\n                    });\n                promises.push(p);\n            }\n        });\n\n        Promise.all(promises).then(emissions => {\n            let total_emissions = emissions.reduce((sum, val) => sum + val, 0);\n\n            // Add 25% manufacturing overhead emissions\n            total_emissions *= 1.25;\n\n            // Round to 2 decimals\n            total_emissions = Math.round(total_emissions * 100) / 100;\n\n            // Set the field on Production Plan\n            frm.set_value('custom_estimated_carbon_emissions_kg_co2e', total_emissions);\n\n            // Optional warning for high emissions\n            if (total_emissions > 1000) {\n                frappe.msgprint({\n                    title: 'High Carbon Emissions Alert',\n                    message: `This production plan will generate approximately ${total_emissions.toFixed(2)} kg CO2e. Consider optimization measures.`,\n                    indicator: 'orange'\n                });\n            }\n        });\n    } else {\n        // If no items, clear emissions\n        frm.set_value('custom_estimated_carbon_emissions_kg_co2e', 0);\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2025-05-28 14:46:58.569693",
  "module": "ESG Compliance",
  "name": "Work Order Carbon Tracking",
  "script": "//\n// Work Order Carbon Emissions Client Script\n//\nfrappe.ui.form.on('Work Order', {\n    refresh(frm) {\n        calculate_work_order_emissions(frm);\n    },\n    qty(frm) {\n        calculate_work_order_emissions(frm);\n    },\n    production_item(frm) {\n        calculate_work_order_emissions(frm);\n    }\n});\n\n// Whenever any row in Required Items changes\nfrappe.ui.form.on('Work Order Item', {\n    item_code(frm, cdt, cdn) {\n        calculate_work_order_emissions(frm);\n    },\n    required_qty(frm, cdt, cdn) {\n        calculate_work_order_emissions(frm);\n    }\n});\n\nasync function calculate_work_order_emissions(frm) {\n    // 1) Fetch overhead %\n    let overhead_pct = 0;\n    if (frm.doc.company) {\n        const company = await frappe.db.get_value('Company', frm.doc.company, 'custom_manufacturing_overhead_percentage');\n        overhead_pct = company?.message?.custom_manufacturing_overhead_percentage || 0;\n    }\n    const overhead_factor = overhead_pct / 100;\n\n    // 2) Compute raw‐material emissions\n    let raw_emissions = 0;\n    if (frm.doc.required_items?.length) {\n        const promises = frm.doc.required_items.map(async row => {\n            if (row.item_code && row.required_qty) {\n                const r = await frappe.db.get_value('Item', row.item_code,\n                    'custom_carbon_emission_factor_kg_co2e_per_unit');\n                const factor = parseFloat(r?.message?.custom_carbon_emission_factor_kg_co2e_per_unit || 0);\n                return row.required_qty * factor;\n            }\n            return 0;\n        });\n        const results = await Promise.all(promises);\n        raw_emissions = results.reduce((sum, v) => sum + v, 0);\n    }\n\n    // 3) Compute process emissions\n    const process_emissions = raw_emissions * overhead_factor;\n\n    // 4) Total\n    const total_emissions = raw_emissions + process_emissions;\n\n    // 5) Round\n    const round = v => Math.round(v * 100) / 100;\n    frm.set_value('custom_raw_material_emissions_kg_co2e', round(raw_emissions));\n    frm.set_value('custom_manufacturing_process_emissions_kg_co2e', round(process_emissions));\n    frm.set_value('custom_total_work_order_emissions_kg_co2e', round(total_emissions));\n\n    // 6) Prompt to set production_item emission factor if blank\n    if (frm.doc.production_item && total_emissions > 0) {\n        const per_unit = total_emissions / (frm.doc.qty || 1);\n        const item = await frappe.db.get_value('Item', frm.doc.production_item,\n            ['custom_carbon_emission_factor_kg_co2e_per_unit', 'custom_emission_factor_last_updated']);\n        if (item?.message?.custom_carbon_emission_factor_kg_co2e_per_unit == null) {\n            frappe.confirm(\n                `Set ${frm.doc.production_item} Carbon Emission Factor to ${per_unit.toFixed(4)} kg CO₂e/unit?`,\n                () => {\n                    frappe.db.set_value('Item', frm.doc.production_item,\n                        'custom_carbon_emission_factor_kg_co2e_per_unit', per_unit);\n                    frappe.db.set_value('Item', frm.doc.production_item,\n                        'custom_emission_factor_last_updated', frappe.datetime.now_date());\n                }\n            );\n        }\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-05-28 11:25:11.658245",
  "module": "ESG Compliance",
  "name": "Item Carbon Management",
  "script": "frappe.ui.form.on('Item', {\n    carbon_emission_factor: function(frm) {\n        if (frm.doc.carbon_emission_factor) {\n            frm.set_value('carbon_last_updated', frappe.datetime.now_date());\n        }\n    },\n    \n    refresh: function(frm) {\n        // Add custom button to calculate carbon factor from BOM\n        if (frm.doc.is_stock_item && frm.doc.default_bom) {\n            frm.add_custom_button(__('Calculate Carbon Factor from BOM'), function() {\n                calculate_carbon_from_bom(frm);\n            }, __('Carbon'));\n        }\n        \n        // Add button to view carbon impact analysis\n        if (frm.doc.carbon_emission_factor) {\n            frm.add_custom_button(__('View Carbon Impact'), function() {\n                show_carbon_impact_analysis(frm);\n            }, __('Carbon'));\n        }\n        \n        // Highlight if carbon factor is outdated\n        if (frm.doc.carbon_last_updated) {\n            let last_updated = frappe.datetime.str_to_obj(frm.doc.carbon_last_updated);\n            let months_old = frappe.datetime.get_diff(frappe.datetime.now_date(), last_updated) / 30;\n            \n            if (months_old > 12) {\n                frm.dashboard.add_comment('Carbon emission factor is over 1 year old. Consider updating.', 'orange', true);\n            }\n        }\n    }\n});\n\nfunction calculate_carbon_from_bom(frm) {\n    if (!frm.doc.default_bom) return;\n    \n    frappe.call({\n        method: 'frappe.client.get',\n        args: {\n            doctype: 'BOM',\n            name: frm.doc.default_bom\n        },\n        callback: function(r) {\n            if (r.message && r.message.items) {\n                calculate_bom_carbon_factor(frm, r.message.items, r.message.quantity);\n            }\n        }\n    });\n}\n\nfunction calculate_bom_carbon_factor(frm, bom_items, bom_qty) {\n    let total_carbon = 0;\n    let promises = [];\n    \n    bom_items.forEach(function(item) {\n        if (item.item_code && item.qty) {\n            let promise = frappe.db.get_value('Item', item.item_code, 'carbon_emission_factor')\n                .then(r => {\n                    if (r.message && r.message.carbon_emission_factor) {\n                        return item.qty * r.message.carbon_emission_factor;\n                    }\n                    return 0;\n                });\n            promises.push(promise);\n        }\n    });\n    \n    Promise.all(promises).then(emissions => {\n        total_carbon = emissions.reduce((sum, emission) => sum + emission, 0);\n        let carbon_per_unit = total_carbon / bom_qty;\n        \n        frappe.confirm(\n            `Calculated carbon emission factor: ${carbon_per_unit.toFixed(4)} kg CO2e per unit. Update?`,\n            function() {\n                frm.set_value('carbon_emission_factor', carbon_per_unit);\n                frm.set_value('carbon_last_updated', frappe.datetime.now_date());\n                frm.set_value('carbon_calculation_method', 'Per Unit');\n            }\n        );\n    });\n}\n\nfunction show_carbon_impact_analysis(frm) {\n    // This would open a custom report or dialog showing carbon impact\n    frappe.route_options = {\"item_code\": frm.doc.name};\n    frappe.set_route(\"query-report\", \"Carbon Impact Analysis\");\n}",
  "view": "Form"
 }
]